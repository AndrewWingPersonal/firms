{"ast":null,"code":"var _jsxFileName = \"/home/andrew/react_learning/custom_hook/preqin/src/App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport useFetch from './hooks/useFetch.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let urls = ['https://jsonplaceholder.typicode.com/todos/1', 'https://jsonplaceholder.typicode.com/todos/2'];\n  const {\n    data1,\n    data2\n  } = useFetch();\n\n  //console.log(jsonData[0])\n\n  //const [data, isLoading, isError] = useFetch(['https://jsonplaceholder.typicode.com/todos/1'])\n\n  //console.log(\"HEREEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\")\n\n  //const url = query && 'https://api.preqin.com/api/Investor?FirmId=' + query;\n\n  //const { myStatus, myData } = useFetch(query && 'https://api.preqin.com/api/Investor?FirmId=' + query);\n  //const { myStatus, myData } = useFetch('https://api.preqin.com/api/Investor?FirmId=' + query);\n\n  //const { myStatus, myData } = useFetch('https://api.preqin.com/api/Investor?FirmId=' + query);\n\n  //const { myStatus, myData } = useFetch();\n\n  //const [data2, isLoading2, isError2] = useFetch(myurl)\n\n  //console.log(\"data is..\")\n  //console.log(jsonData1)\n\n  return (\n    /*#__PURE__*/\n    /*\n    <div className=\"App\">\n      <p>\"Hello World\"</p>\n    </div>\n    */\n    _jsxDEV(\"pre\", {\n      children: JSON.stringify(data1, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(App, \"jhtrNPDZtkZvjULPL9X7xUxWzAA=\", false, function () {\n  return [useFetch];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","useState","useEffect","useFetch","jsxDEV","_jsxDEV","App","_s","urls","data1","data2","children","JSON","stringify","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/andrew/react_learning/custom_hook/preqin/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport {useState, useEffect} from 'react';\n\nimport useFetch from './hooks/useFetch.js';\n\nfunction App() {\n  let urls = ['https://jsonplaceholder.typicode.com/todos/1',\n              'https://jsonplaceholder.typicode.com/todos/2']\n\n  const { data1, data2 } = useFetch()\n  \n  //console.log(jsonData[0])\n  \n  //const [data, isLoading, isError] = useFetch(['https://jsonplaceholder.typicode.com/todos/1'])\n\n  //console.log(\"HEREEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\")\n\n\n  //const url = query && 'https://api.preqin.com/api/Investor?FirmId=' + query;\n\n  //const { myStatus, myData } = useFetch(query && 'https://api.preqin.com/api/Investor?FirmId=' + query);\n  //const { myStatus, myData } = useFetch('https://api.preqin.com/api/Investor?FirmId=' + query);\n\n  //const { myStatus, myData } = useFetch('https://api.preqin.com/api/Investor?FirmId=' + query);\n\n  //const { myStatus, myData } = useFetch();\n\n  //const [data2, isLoading2, isError2] = useFetch(myurl)\n\n  \n  \n  //console.log(\"data is..\")\n  //console.log(jsonData1)\n\n  return (\n    /*\n    <div className=\"App\">\n      <p>\"Hello World\"</p>\n    </div>\n    */\n    <pre>{JSON.stringify(data1, null, 2)}</pre>\n\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,SAAQC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAEzC,OAAOC,QAAQ,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,IAAIC,IAAI,GAAG,CAAC,8CAA8C,EAC9C,8CAA8C,CAAC;EAE3D,MAAM;IAAEC,KAAK;IAAEC;EAAM,CAAC,GAAGP,QAAQ,CAAC,CAAC;;EAEnC;;EAEA;;EAEA;;EAGA;;EAEA;EACA;;EAEA;;EAEA;;EAEA;;EAIA;EACA;;EAEA;IAAA;IACE;AACJ;AACA;AACA;AACA;IACIE,OAAA;MAAAM,QAAA,EAAMC,IAAI,CAACC,SAAS,CAACJ,KAAK,EAAE,IAAI,EAAE,CAAC;IAAC;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;AAG/C;AAACV,EAAA,CAtCQD,GAAG;EAAA,QAIeH,QAAQ;AAAA;AAAAe,EAAA,GAJ1BZ,GAAG;AAwCZ,eAAeA,GAAG;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}