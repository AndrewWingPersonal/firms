{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nconst useFetch = () => {\n  _s();\n  const [data1, setData1] = useState({});\n  const [data2, setData2] = useState();\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    setLoading(true);\n    const fetchData = async () => {\n      try {\n        const responsesJSON = await Promise.all([fetch('https://jsonplaceholder.typicode.com/todos/1'), fetch('https://jsonplaceholder.typicode.com/todos/2')]);\n        const [todoOne, todoTwo] = await Promise.all(responsesJSON.map(r => r.json()));\n        console.log(todoOne, 'todoOne');\n        //setData1(todoOne) \n        //setData1(Object.assign({}, todoOne, todoTwo))\n        setData1([todoOne, todoTwo]);\n        //ar food = Object.assign({}, a, b);\n        console.log(todoTwo, 'todoOne');\n        console.log(todoTwo, 'todoTwo');\n        setLoading(false);\n      } catch (err) {\n        throw err;\n      }\n    };\n    fetchData();\n  }, []);\n  return {\n    data1,\n    loading\n  };\n};\n/*\n\nconst useFetch = (urls) => {\n\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                let i = 0;\n              setData1(todoOne)\n\n                while (i < urls.length) {\n                    const response = await fetch(urls[i]);\n                    const json = await response.json();\n                    //console.log(json);\n                    setData(json);\n\n                    i++;\n                }\n                console.log(\"DIVIDER!!!!!!!!!!!!!!!!!!!!\")\n                console.log(data)\n            } catch (err) {\n                  throw err;data1\n            }\n          };\n          \n          fetchData();\n    });\n\n    //console.log(data)\n     return data\n};\n*/\n_s(useFetch, \"AnFgPpM833pbRSOkDwrilp8/Bbg=\");\nexport default useFetch;","map":{"version":3,"names":["useEffect","useState","useFetch","_s","data1","setData1","data2","setData2","loading","setLoading","fetchData","responsesJSON","Promise","all","fetch","todoOne","todoTwo","map","r","json","console","log","err"],"sources":["/home/andrew/react_learning/custom_hook/preqin/src/hooks/useFetch.js"],"sourcesContent":["import {useEffect, useState} from 'react';\n\nconst useFetch = () => {\n\n   const [data1, setData1] = useState({});\n   const [data2, setData2] = useState();\n   const [loading, setLoading] = useState(false)\n\n    useEffect(() => {\n      setLoading(true)\n        const fetchData = async () => {\n            try {\n              const responsesJSON = await Promise.all([\n                  fetch('https://jsonplaceholder.typicode.com/todos/1'),\n                  fetch('https://jsonplaceholder.typicode.com/todos/2')\n              ]);\n              const [todoOne, todoTwo] = await Promise.all(responsesJSON.map(r => r.json()));\n              console.log(todoOne, 'todoOne');\n              //setData1(todoOne) \n              //setData1(Object.assign({}, todoOne, todoTwo))\n              setData1([todoOne, todoTwo])\n              //ar food = Object.assign({}, a, b);\n              console.log(todoTwo, 'todoOne');\n              console.log(todoTwo, 'todoTwo');\n              setLoading(false)\n\n            } catch (err) {\n              throw err;\n            }\n          };\n          \n          fetchData();\n    }, []);\n \n    return {data1, loading}\n}\n/*\n\nconst useFetch = (urls) => {\n\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                let i = 0;\n              setData1(todoOne)\n\n                while (i < urls.length) {\n                    const response = await fetch(urls[i]);\n                    const json = await response.json();\n                    //console.log(json);\n                    setData(json);\n\n                    i++;\n                }\n                console.log(\"DIVIDER!!!!!!!!!!!!!!!!!!!!\")\n                console.log(data)\n            } catch (err) {\n                  throw err;data1\n            }\n          };\n          \n          fetchData();\n    });\n\n    //console.log(data)\n     return data\n};\n*/\nexport default useFetch;"],"mappings":";AAAA,SAAQA,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAEzC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEpB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtC,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,CAAC;EACpC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACdS,UAAU,CAAC,IAAI,CAAC;IACd,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACF,MAAMC,aAAa,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACpCC,KAAK,CAAC,8CAA8C,CAAC,EACrDA,KAAK,CAAC,8CAA8C,CAAC,CACxD,CAAC;QACF,MAAM,CAACC,OAAO,EAAEC,OAAO,CAAC,GAAG,MAAMJ,OAAO,CAACC,GAAG,CAACF,aAAa,CAACM,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC9EC,OAAO,CAACC,GAAG,CAACN,OAAO,EAAE,SAAS,CAAC;QAC/B;QACA;QACAV,QAAQ,CAAC,CAACU,OAAO,EAAEC,OAAO,CAAC,CAAC;QAC5B;QACAI,OAAO,CAACC,GAAG,CAACL,OAAO,EAAE,SAAS,CAAC;QAC/BI,OAAO,CAACC,GAAG,CAACL,OAAO,EAAE,SAAS,CAAC;QAC/BP,UAAU,CAAC,KAAK,CAAC;MAEnB,CAAC,CAAC,OAAOa,GAAG,EAAE;QACZ,MAAMA,GAAG;MACX;IACF,CAAC;IAEDZ,SAAS,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAACN,KAAK;IAAEI;EAAO,CAAC;AAC3B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCAL,EAAA,CAlCMD,QAAQ;AAoEd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}