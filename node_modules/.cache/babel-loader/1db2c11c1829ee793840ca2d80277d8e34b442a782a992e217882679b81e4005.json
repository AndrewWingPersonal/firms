{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nconst useFetch = url => {\n  _s();\n  const cache = useRef({});\n  const [status, setStatus] = useState('idle');\n  const [data, setData] = useState([]);\n  const [executed, setExecuted] = useState(false);\n  useEffect(() => {\n    if (!url) return;\n    const fetchData = async () => {\n      setStatus('fetching');\n      if (cache.current[url]) {\n        const data = cache.current[url];\n        setData(data);\n        setStatus('fetched');\n      } else {\n        try {\n          const response = await fetch(url);\n          if (!response.ok) {\n            throw new Error('Network response was not ok');\n          }\n          const data = (await response.json()) || {};\n          cache.current[url] = data; // set response in cache;\n          setData(data);\n          setStatus('fetched');\n        } catch (error) {\n          console.log(\"error with fetch\");\n        }\n      }\n      setExecuted(true);\n    };\n    if (!executed) {\n      fetchData();\n    }\n  }, [url]);\n  return {\n    status,\n    data\n  };\n};\n_s(useFetch, \"mNWC0NEFYm8oQ3viRZxoQ4vlog4=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useRef","useFetch","url","_s","cache","status","setStatus","data","setData","executed","setExecuted","fetchData","current","response","fetch","ok","Error","json","error","console","log"],"sources":["/home/andrew/react_learning/custom_hook/preqin/src/hooks/useFetch.js"],"sourcesContent":["\nimport {useState, useEffect, useRef} from 'react';\n\nconst useFetch = (url) => {\n    const cache = useRef({});\n    const [status, setStatus] = useState('idle');\n    const [data, setData] = useState([]);\n    const [executed, setExecuted] = useState(false); \n\n    useEffect(() => {\n        if (!url) return;\n\n        const fetchData = async () => {\n            setStatus('fetching');\n            if (cache.current[url]) {\n                const data = cache.current[url];\n                setData(data);\n                setStatus('fetched');\n            } else {\n                try {\n                  const response = await fetch(url);\n                  if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                  }\n                  const data = await response.json() || {};\n                  cache.current[url] = data; // set response in cache;\n                  setData(data);\n                  setStatus('fetched');\n                } catch(error) {\n                    console.log(\"error with fetch\")\n                }\n            }\n            setExecuted(true)\n        };\n\n        if (!executed) {\n            fetchData();\n        }\n    }, [url]);\n\n    return { status, data };\n};\n\nexport default useFetch;"],"mappings":";AACA,SAAQA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAO,OAAO;AAEjD,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAAC,EAAA;EACtB,MAAMC,KAAK,GAAGJ,MAAM,CAAC,CAAC,CAAC,CAAC;EACxB,MAAM,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,MAAM,CAAC;EAC5C,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE/CC,SAAS,CAAC,MAAM;IACZ,IAAI,CAACG,GAAG,EAAE;IAEV,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1BL,SAAS,CAAC,UAAU,CAAC;MACrB,IAAIF,KAAK,CAACQ,OAAO,CAACV,GAAG,CAAC,EAAE;QACpB,MAAMK,IAAI,GAAGH,KAAK,CAACQ,OAAO,CAACV,GAAG,CAAC;QAC/BM,OAAO,CAACD,IAAI,CAAC;QACbD,SAAS,CAAC,SAAS,CAAC;MACxB,CAAC,MAAM;QACH,IAAI;UACF,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACZ,GAAG,CAAC;UACjC,IAAI,CAACW,QAAQ,CAACE,EAAE,EAAE;YAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;UAChD;UACA,MAAMT,IAAI,GAAG,OAAMM,QAAQ,CAACI,IAAI,CAAC,CAAC,KAAI,CAAC,CAAC;UACxCb,KAAK,CAACQ,OAAO,CAACV,GAAG,CAAC,GAAGK,IAAI,CAAC,CAAC;UAC3BC,OAAO,CAACD,IAAI,CAAC;UACbD,SAAS,CAAC,SAAS,CAAC;QACtB,CAAC,CAAC,OAAMY,KAAK,EAAE;UACXC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QACnC;MACJ;MACAV,WAAW,CAAC,IAAI,CAAC;IACrB,CAAC;IAED,IAAI,CAACD,QAAQ,EAAE;MACXE,SAAS,CAAC,CAAC;IACf;EACJ,CAAC,EAAE,CAACT,GAAG,CAAC,CAAC;EAET,OAAO;IAAEG,MAAM;IAAEE;EAAK,CAAC;AAC3B,CAAC;AAACJ,EAAA,CAtCIF,QAAQ;AAwCd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}